# Language LONN (nonempty list of numbers)

# Lexical specification
skip WHITESPACE '\s+'
LPAREN '\('
RPAREN '\)'
NUM '\d+'

%

# Syntactic specification
<lon>           ::= LPAREN <NUM> <nums> RPAREN
<nums>:NumsNode ::= <NUM> <nums>
<nums>:NumsNull ::=

%
# Semantic specification
#
# Add a `toString` method to the `Lon` class
Lon
%%%
    public void $run() {
        int m = min();
        System.out.println("" + m);
    }

    public String toString() {
      return num.toString() + nums.toString();
    }

    public int min() {
        int minSoFar = Integer.parseInt(num.toString());
        return nums.min(minSoFar); // Get the overall minimum.
    }
%%%

Nums
%%%
    public abstract int min(int minSoFar);
    public abstract String toString();
%%%

NumsNode
%%%
    public int min(int minSoFar) {
      int minPast= Math.min( minSoFar, Integer.parseInt(num.toString()));
      return Math.min(minPast, nums.min(minPast));
    }

    public String toString(){
      return num.toString() + nums.toString();
    }

%%%

NumsNull
%%%
    public int min(int minSoFar) {
        return Integer.MAX_VALUE; 
    }
    public String toString(){
      return "";
    }
%%%
